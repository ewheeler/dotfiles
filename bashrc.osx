# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# for reference:
# zeta 196.0.26.49
# lambda 196.0.26.61
# delta 196.0.26.46
# sigma 196.0.26.50
# pinwheel 208.82.103.111
# ssh -C2qTnN -D 8080 apis@208.82.103.111
# mkvmerge -o machine.mkv --split 3g The.Machine.2013.720p.BluRay.DTS.x264-NTb.mkv
# sudo ifconfig en1 lladdr 00:aa:bb:cc:dd:ee

# man -k dtrace
# iosnoop: see all disk I/O. especially useful to find disk-chatty/poll-y apps.
# execsnoop: see new processes being spawned.
# opensnoop: see file opens. especially useful for failed file opens that break an app.
# dtruss: see all system calls. get access to the entire OS interaction history of an process (or app).
# errinfo: trace failing system calls. where there is smoke...
# iotop -- who is using disk



# opendns
# 208.67.222.222
# 208.67.220.220

# google dns
# 8.8.8.8
# 8.8.4.4

# Search for something
# find . | xargs grep -s foo

# Count lines in files in directory
# find . -name '*.py' | xargs wc -l

# Show what ports are being listened to
# netstat -tulpn
# sudo lsof -i -n -P | grep TCP

# Show what opened a port
# ls -l /proc/1138/exe

# Show connections based on the host and the port using @host:port
# lsof -i@192.168.1.5:22

# Show what a given user has open using -u
# lsof -u daniel

# See what files and network connections a command is using with -c or pid with -p
# lsof -c syslog-ng
# lsof -p 10075

# Pointing to a file shows what's interacting with that file
# lsof /var/log/messages

# Print bad things from a log
# cat mylog.log | awk '/[eE]xception|ERROR|Error/ {$1=$2=""; print FNR $0}'
# cat mylog.log | awk '/ERROR/ {$1=$2=""; print FNR $0}'

# List filenames and total number of bad things in each
# for FILE in $(ls); do awk '/[eE]xception|ERROR/ { n++ }; END {print FILENAME" "n+0}' $FILE; done
# for FILE in $(ls); do awk '/ERROR/ { n++ }; END {print FILENAME" "n+0}' $FILE; done

# run script and then drop into python shell
# ipython -i --c="%run script.py --autoreload"

# show all hidden files in finder
# defaults write com.apple.finder AppleShowAllFiles TRUE
# killall Finder

# fix webcam
# sudo killall VDCAssistant

PATH=/usr/local/bin:$PATH
PATH=/usr/local/sbin:$PATH

# add non-system-installed ruby/node stuff to path
PATH=/usr/local/opt/ruby/bin:$PATH
PATH=/usr/local/share/npm/bin:$PATH
#PATH=/usr/local/lib/node_modules/npm/bin:$PATH
#export NODE_PATH=/usr/local/lib/node_modules

export GOPATH=/Users/ewheeler/go/

export vi_cv_path_python=/usr/local/bin/python
export HOMEBREW_GITHUB_API_TOKEN=65fbac1e64af11856c80e9b513e65b60999addb7

export HISTCONTROL=erasedups
export HISTSIZE=10000
export ARCHFLAGS='-arch i386 -arch x86_64'
# use homebrew-installed vim
export EDITOR='/usr/local/bin/vim'
export LSCOLORS=DxGxcxdxBxegedabagacad
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8
# temporary fix until i rebuild python
# https://github.com/mxcl/homebrew/issues/17312
#export DYLD_LIBRARY_PATH=/usr/local/Cellar/sqlite/3.7.15.2/lib:$DYLD_LIBRARY_PATH
shopt -s histappend
stty -echoctl

# git helpers
alias trackfeatures='git fetch; for REMOTE in `git branch -r | grep feature `; do git checkout --track $REMOTE; done;'
alias trackreleases='git fetch; for REMOTE in `git branch -r | grep release `; do git checkout --track $REMOTE; done;'
alias trackremotes='git fetch; for REMOTE in `git branch -r`; do git checkout --track $REMOTE; done;'
pr() {
    git fetch -fu origin refs/pull/$1/head:pr/$1
    git checkout pr/$1
}
prc() {
    git for-each-ref refs/heads/pr/* --format='%(refname)' | \
        while read ref; do git branch -D ${ref#refs/heads/}; done
}

alias pipupgrade="pip freeze --local | grep -v '^\-e' | cut -d = -f 1  | xargs pip install -U"
alias lsusb="ioreg -p IOUSB -w0 | sed 's/[^o]*o //; s/@.*$//' | grep -v '^Root.*'"

# tunnel
alias tunnel="ssh -C2qTnN -D 8080 apis@208.82.103.111"

alias kafka="zookeeper-server-start /usr/local/etc/kafka/zookeeper.properties & kafka-server-start /usr/local/etc/kafka/server.properties"

# add nvm
source $(brew --prefix nvm)/nvm.sh

# add git completion
source /usr/local/etc/bash_completion.d/git-completion.bash
source /usr/local/etc/bash_completion.d/git-prompt.sh
# add virtualenvwrapper
export VIRTUALENV_DISTRIBUTE=true
export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python2.7
export WORKON_HOME=$HOME/.virtualenvs
alias linkproject='setvirtualenvproject $VIRTUAL_ENV $(pwd)'
export PROJECT_HOME=$HOME/Devel
source /usr/local/bin/virtualenvwrapper.sh
# add pip completion
_pip_completion()
{
    COMPREPLY=( $( COMP_WORDS="${COMP_WORDS[*]}" \
                   COMP_CWORD=$COMP_CWORD \
                   PIP_AUTO_COMPLETE=1 $1 ) )
}
complete -o default -F _pip_completion pip
# duplicate of entry in .pip/pip.conf
# export so vagrant-cachier can find it
export PIP_DOWNLOAD_CACHE=/Users/ewheeler/.pip/cache

# prompt stuff
GIT_PS1_SHOWDIRTYSTATE=true
GIT_PS1_SHOWUPSTREAM="auto"
#export PS1='\[\033[31;37m\]\h[\w]\$ \[\033[0m\]'
export PS1='\[\033[31;37m\]\h[\w]$(__git_ps1 " (%s)")\$ \[\033[0m\]'

# little utilities/niceities
alias ls='ls -G'
alias rmpyc='find . -name "*.pyc" -exec rm {} \;'
alias rmdsstores='find . -name .DS_Store -print0 | xargs -0 git rm --ignore-unmatch'
#alias rmpyc='find . -name "*.pyc"| xargs rm'
alias bitch,='sudo'
alias flushdns='dscacheutil -flushcache'
alias serve='python -m SimpleHTTPServer 3000'
alias spark='$HOME/dev/spark/spark'
alias fixgems="sed -i 's/ 00:00:00.000000000Z//' /var/lib/gems/1.8/specifications/*"
alias gl="git log --graph --pretty=\"format:%C(yellow)%h%Cblue%d%Creset %s %C(white) %an, %ar%Creset\""
alias week="date +%V"
alias map="xargs -n1"
alias pypi="python setup.py register sdist upload"
alias lunch="lunchy"
alias graphite="sudo python /opt/graphite/bin/run-graphite-devel-server.py /opt/graphite/ ; cd /Users/ewheeler/dev/statsd/ && node stats.js config.js"
alias roulette="[ $[ $RANDOM % 6 ] = 0 ] && echo 'BANG' || echo 'Click'"

alias mongod='mongod --config /usr/local/etc/mongod.conf'

# shortcuts for remote machines
alias datamine='ssh -L 5983:localhost:5984 ubuntu@datamine.txteagle.com'
alias ucmp='ssh -L 5983:localhost:5984 ubuntu@ucmp.txteagle.com'
alias pdb2='ssh -L 5983:localhost:5984 conductor@pdb2.txteagle.com'
alias vaxlg='ssh -i ewheeler.pem ubuntu@ec2-50-17-51-57.compute-1.amazonaws.com'
alias ckan='ssh -i ewheeler.pem ubuntu@ec2-174-129-253-28.compute-1.amazonaws.com'
alias nimrod='ssh -L 5983:localhost:5984 root@keno.com.ng'
alias sliderule='ssh -L 5983:localhost:5984 ewheeler@sliderule.dyndns.org'
alias revere='ssh -p9 -levan 70.91.220.107'
alias reverecouch='ssh -p9 -levan -L 5983:localhost:5984 70.91.220.107'
alias air='ssh -L 8891:localhost:8891 conductor@air.txteagle.com'
alias dev3='ssh -L 8891:localhost:8891 conductor@dev3.txteagle.com'
# 208.82.103.111

# shortcuts for todo-txt
alias t='/usr/local/bin/todo.sh -d $HOME/.todo.cfg'
alias tls='/usr/local/bin/todo.sh -d $HOME/.todo.cfg ls'
alias tadd='/usr/local/bin/todo.sh -d $HOME/.todo.cfg add'

# alias to site-packages
alias sp='/usr/local/Cellar/python/2.7.5/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages'
alias aka='/usr/local/lib/python2.7/site-packages'

# amazon
# export JAVA_HOME="$(/usr/libexec/java_home)"
# export EC2_PRIVATE_KEY="$(/bin/ls "$HOME"/.ec2/pk-*.pem | /usr/bin/head -1)"
# export EC2_CERT="$(/bin/ls "$HOME"/.ec2/cert-*.pem | /usr/bin/head -1)"
# export EC2_AMITOOL_HOME="/usr/local/Library/LinkedKegs/ec2-ami-tools/jars"

# Extract about anything
extract () {
	if [ -f $1 ] ; then
		case $1 in
			*.tar.bz2)   tar xvjf $1   ;;
			*.tar.gz)    tar xvzf $1   ;;
			*.bz2)       bunzip2 $1    ;;
			*.rar)       unrar x $1    ;;
			*.gz)        gunzip $1     ;;
			*.tar)       tar xvf $1    ;;
			*.tbz2)      tar xvjf $1   ;;
			*.tgz)       tar xvzf $1   ;;
			*.zip)       unzip $1      ;;
			*.Z)         uncompress $1 ;;
			*.7z)        7z x $1       ;;
			*)           echo "'$1' cannot be extracted via >extract<" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

# For lazy people like me
# https://raw.github.com/mitsuhiko/dotfiles/master/bash/bashrc
from() { expect -c "spawn -noecho python
expect \">>> \"
send \"from $*\r\"
interact +++ return"; }
import() { expect -c "spawn -noecho python
expect \">>> \"
send \"import $*\r\"
interact +++ return"; }

# Usage: show <local-port> <subdomain>
function show() {
    DOMAIN=".pinwheel.apini.net"
    REMOTE="$2$DOMAIN"
    ssh -tR 1080:127.0.0.1:$1 pinwheel "sudo ssh -Nl \$USER -L $REMOTE:80:127.0.0.1:1080 localhost"
}

# Usage: dragonfly <local-port> <subdomain>
function dragonfly() {
    DOMAIN=".pinwheel.apini.net"
    REMOTE="$2$DOMAIN"
    ssh -tR 7001:127.0.0.1:$1 pinwheel "sudo ssh -Nl \$USER -L $REMOTE:7001:127.0.0.1:7001 localhost"
}

export ANDROID_HOME=/Users/ewheeler/sdk
export PATH=${PATH}:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools

export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting
