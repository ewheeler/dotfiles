# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# for reference:

# Search for something
# find . | xargs grep -s foo

# Show connections based on the host and the port using @host:port
# lsof -i@192.168.1.5:22

# Show what a given user has open using -u
# lsof -u daniel

# See what files and network connections a command is using with -c or pid with -p
# lsof -c syslog-ng
# lsof -p 10075

# Pointing to a file shows what's interacting with that file
# lsof /var/log/messages

# Print bad things from a log
# cat mylog.log | awk '/[eE]xception|ERROR/ {$1=$2=""; print FNR $0}'
# cat mylog.log | awk '/ERROR/ {$1=$2=""; print FNR $0}'

# List filenames and total number of bad things in each
# for FILE in $(ls); do awk '/[eE]xception|ERROR/ { n++ }; END {print FILENAME" "n+0}' $FILE; done
# for FILE in $(ls); do awk '/ERROR/ { n++ }; END {print FILENAME" "n+0}' $FILE; done

export PATH=/usr/local/bin:$PATH
export PATH=/usr/local/sbin:$PATH

# add non-system-installed python/ruby to path
export PATH=/usr/local/Cellar/ruby/1.9.3-p125/bin:$PATH
export PATH=/usr/local/opt/ruby/bin:$PATH
export PATH=/usr/local/Cellar/python/2.7.3/bin:$PATH
export PATH=/usr/local/share/python:$PATH
export PATH=/usr/local/share/npm/bin:$PATH
export NODE_PATH=/usr/local/lib/node_modules

export HISTCONTROL=erasedups
export HISTSIZE=10000
export ARCHFLAGS='-arch i386 -arch x86_64'
export EDITOR='mvim -v'
export LSCOLORS=DxGxcxdxBxegedabagacad
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8
# temporary fix until i rebuild python
# https://github.com/mxcl/homebrew/issues/17312
export DYLD_LIBRARY_PATH=/usr/local/Cellar/sqlite/3.7.15.2/lib:$DYLD_LIBRARY_PATH
shopt -s histappend
stty -echoctl

# use homebrew-installed MacVim
alias vim='mvim -v'

# git flow helpers
alias trackfeatures='git fetch; for REMOTE in `git branch -r | grep feature `; do git checkout --track $REMOTE; done;'
alias trackreleases='git fetch; for REMOTE in `git branch -r | grep release `; do git checkout --track $REMOTE; done;'

# add git completion
source /usr/local/etc/bash_completion.d/git-completion.bash
source /usr/local/etc/bash_completion.d/git-prompt.sh
# add virtualenvwrapper
export WORKON_HOME=$HOME/.virtualenvs
source /usr/local/share/python/virtualenvwrapper.sh
alias linkproject='setvirtualenvproject $VIRTUAL_ENV $(pwd)'
# add pip completion
_pip_completion()
{
    COMPREPLY=( $( COMP_WORDS="${COMP_WORDS[*]}" \
                   COMP_CWORD=$COMP_CWORD \
                   PIP_AUTO_COMPLETE=1 $1 ) )
}
complete -o default -F _pip_completion pip

# prompt stuff
GIT_PS1_SHOWDIRTYSTATE=true
GIT_PS1_SHOWUPSTREAM="auto"
#export PS1='\[\033[31;37m\]\h[\w]\$ \[\033[0m\]'
export PS1='\[\033[31;37m\]\h[\w]$(__git_ps1 " (%s)")\$ \[\033[0m\]'

# little utilities/niceities
alias ls='ls -G'
alias rmpyc='find . -name "*.pyc" -exec rm {} \;'
#alias rmpyc='find . -name "*.pyc"| xargs rm'
alias bitch,='sudo'
alias flushdns='dscacheutil -flushcache'
alias serve='python -m SimpleHTTPServer'
alias spark='$HOME/dev/spark/spark'
alias fixgems="sed -i 's/ 00:00:00.000000000Z//' /var/lib/gems/1.8/specifications/*"
alias gl="git log --graph --pretty=\"format:%C(yellow)%h%Cblue%d%Creset %s %C(white) %an, %ar%Creset\""
alias week="date +%V"
alias map="xargs -n1"
alias pypi="python setup.py register sdist upload"

# shortcuts for starting/stopping services
alias stopredis='launchctl unload -w $HOME/Library/LaunchAgents/homebrew.mxcl.redis.plist'
alias startredis='launchctl load -w $HOME/Library/LaunchAgents/homebrew.mxcl.redis.plist'
alias stopmysql='launchctl unload -w $HOME/Library/LaunchAgents/com.mysql.mysqld.plist'
alias startmysql='launchctl load -w $HOME/Library/LaunchAgents/com.mysql.mysqld.plist'
alias stopcouch='launchctl unload -w $HOME/Library/LaunchAgents/org.apache.couchdb.plist'
alias startcouch='launchctl load -w $HOME/Library/LaunchAgents/org.apache.couchdb.plist'
alias stopmongo='launchctl unload -w $HOME/Library/LaunchAgents/org.mongodb.mongod.plist'
alias startmongo='launchctl load -w $HOME/Library/LaunchAgents/org.mongodb.mongod.plist'
alias loadpostgres='launchctl load -w $HOME/Library/LaunchAgents/homebrew.mxcl.postgresql.plist'
alias unloadpostgres='launchctl unload -w $HOME/Library/LaunchAgents/homebrew.mxcl.postgresql.plist'
alias startpostgres='pg_ctl -D /usr/local/var/postgres/data -l /usr/local/var/postgres/data/server.log start'
alias stoppostgres='pg_ctl -D /usr/local/var/postgres stop -s -m fast'
alias startjetty='/usr/local/Cellar/jetty/8.1.8/libexec/bin/jetty.sh start'
alias stopjetty='/usr/local/Cellar/jetty/8.1.8/libexec/bin/jetty.sh stop'

# shortcuts for remote machines
alias datamine='ssh -L 5983:localhost:5984 ubuntu@datamine.txteagle.com'
alias ucmp='ssh -L 5983:localhost:5984 ubuntu@ucmp.txteagle.com'
alias pdb2='ssh -L 5983:localhost:5984 conductor@pdb2.txteagle.com'
alias vaxlg='ssh -i ewheeler.pem ubuntu@ec2-50-17-51-57.compute-1.amazonaws.com'
alias nimrod='ssh -L 5983:localhost:5984 root@keno.com.ng'
alias sliderule='ssh -L 5983:localhost:5984 ewheeler@sliderule.dyndns.org'
alias revere='ssh -p9 -levan 70.91.220.107'
alias reverecouch='ssh -p9 -levan -L 5983:localhost:5984 70.91.220.107'
alias air='ssh -L 8891:localhost:8891 conductor@air.txteagle.com'
alias dev3='ssh -L 8891:localhost:8891 conductor@dev3.txteagle.com'

# shortcuts for todo-txt
alias t='/usr/local/bin/todo.sh -d $HOME/.todo.cfg'
alias tls='/usr/local/bin/todo.sh -d $HOME/.todo.cfg ls'
alias tadd='/usr/local/bin/todo.sh -d $HOME/.todo.cfg add'

# alias to site-packages
alias sp='/usr/local/Cellar/python/2.7.2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages'
alias aka='/usr/local/lib/python2.7/site-packages'

# amazon
export JAVA_HOME="$(/usr/libexec/java_home)"
export EC2_PRIVATE_KEY="$(/bin/ls "$HOME"/.ec2/pk-*.pem | /usr/bin/head -1)"
export EC2_CERT="$(/bin/ls "$HOME"/.ec2/cert-*.pem | /usr/bin/head -1)"
export EC2_AMITOOL_HOME="/usr/local/Library/LinkedKegs/ec2-ami-tools/jars"

# Extract about anything
extract () {
	if [ -f $1 ] ; then
		case $1 in
			*.tar.bz2)   tar xvjf $1   ;;
			*.tar.gz)    tar xvzf $1   ;;
			*.bz2)       bunzip2 $1    ;;
			*.rar)       unrar x $1    ;;
			*.gz)        gunzip $1     ;;
			*.tar)       tar xvf $1    ;;
			*.tbz2)      tar xvjf $1   ;;
			*.tgz)       tar xvzf $1   ;;
			*.zip)       unzip $1      ;;
			*.Z)         uncompress $1 ;;
			*.7z)        7z x $1       ;;
			*)           echo "'$1' cannot be extracted via >extract<" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

# For lazy people like me
# https://raw.github.com/mitsuhiko/dotfiles/master/bash/bashrc
from() { expect -c "spawn -noecho python
expect \">>> \"
send \"from $*\r\"
interact +++ return"; }
import() { expect -c "spawn -noecho python
expect \">>> \"
send \"import $*\r\"
interact +++ return"; }

# Usage: show <local-port> <subdomain>
function show() {
    DOMAIN=".pinwheel.apini.net"
    REMOTE="$2$DOMAIN"
    ssh -tR 1080:127.0.0.1:$1 pinwheel "sudo ssh -Nl \$USER -L $REMOTE:80:127.0.0.1:1080 localhost"
}

# Usage: dragonfly <local-port> <subdomain>
function dragonfly() {
    DOMAIN=".pinwheel.apini.net"
    REMOTE="$2$DOMAIN"
    ssh -tR 7001:127.0.0.1:$1 pinwheel "sudo ssh -Nl \$USER -L $REMOTE:7001:127.0.0.1:7001 localhost"
}
